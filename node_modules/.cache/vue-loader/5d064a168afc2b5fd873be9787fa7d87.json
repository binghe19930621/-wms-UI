{"remainingRequest":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\SKWMS\\wms-ui\\src\\components\\page-content\\enum-selector\\WarehouseSelector.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\SKWMS\\wms-ui\\src\\components\\page-content\\enum-selector\\WarehouseSelector.vue","mtime":1585370815949},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Api from \"@/assets/api/Api\";\nimport CollectionUtil from \"@/util/CollectionUtil\";\n\nexport default {\n    name: \"WarehouseSelector\",\n    components: {},\n    props: {\n        value: {\n            default: 0\n        },\n        isFilter: {\n            default: false\n        },\n        level: {\n            default: 1\n        },\n        visible: {\n            default: true\n        },\n        width: {\n            default: '200px'\n        },\n        filterIds: {\n            default() {\n                return [];\n            }\n        },\n        needFilter: {\n            default :false\n        }\n    },\n    data() {\n        return {\n            warehouses: [],\n            reservoirs: [],\n            stocks: [],\n            tree: [],\n            selectArray: []\n        }\n    },\n    mounted() {\n        this.reload();\n    },\n    methods: {\n        reload() {\n            this.refreshList();\n            this.change(this.isFilter ? 0 : null);\n        },\n        change(v) {\n            this.$emit('input', v);\n        },\n        refreshList() {\n            this.$ajax.request(Api.warehouse.warSelectAll).then(resp => {\n                this.warehouses = resp;\n                if (this.level > 1) {\n                    return this.$ajax.request(Api.warehouse.resSelectAll);\n                }\n            }).then(resp => {\n                this.reservoirs = resp;\n                if (this.level > 2) {\n                    return this.$ajax.request(Api.warehouse.stockSelectAll);\n                }\n            }).then(resp => {\n                this.stocks = resp;\n            }).finally(() => this.createTree())\n        },\n\n        createTree() {\n            this.tree = CollectionUtil.listToTreeByTwoList(\n                this.warehouses,\n                CollectionUtil.listToTreeByTwoList(this.reservoirs, this.stocks, 'reservoirId'),\n                'warehouseId'\n            );\n            if (this.isFilter) {\n                this.tree = [{\n                    id: 0,\n                    name: '全部'\n                }].concat(this.tree);\n            } else if ( this.needFilter || this.filterIds.length) {\n                this.tree = CollectionUtil.filterTree(this.tree, x => this.filterIds.includes(x.id), 'children', 3);\n            }\n            this.refreshSelect();\n        },\n\n        refreshSelect() {\n            this.selectArray = CollectionUtil.getTreeRoute(this.tree, x => x.id === this.value, 'id', 'children', this.level);\n        },\n\n        itemChange(nodes) {\n            if ( !this.isFilter && nodes.length < this.level) return;\n            this.$emit('input', nodes.length !== this.level ? 0 : nodes[nodes.length - 1]);\n            this.$emit('change', nodes);\n        }\n\n    },\n    watch: {\n        visible(v) {\n            if (v) {\n                this.refreshList();\n            }\n        },\n        value() {\n            this.refreshSelect();\n        },\n        filterIds() {\n            this.createTree();\n        }\n    },\n    computed: {\n        valueUse() {\n            if (this.value) {\n                return this.value;\n            }\n            return this.isFilter ? 0 : null;\n        },\n        plcText() {\n            return '请选择' + ['仓库', '仓位', '货架'][this.level - 1]\n        }\n    },\n\n}\n",{"version":3,"sources":["WarehouseSelector.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAefile":"WarehouseSelector.vue","sourceRoot":"src/components/page-content/enum-selector","sourcesContent":["<template>\r\n    <div class=\"WarehouseSelector\">\r\n        <el-cascader\r\n                :style=\"{'width' : width}\"\r\n                :value=\"selectArray\"\r\n                :placeholder=\" isFilter? '全部' : plcText\"\r\n                :options=\"tree\"\r\n                :props=\"{value:'id', label: 'name'}\"\r\n                @change=\"itemChange\"\r\n                :change-on-select=\"isFilter\"\r\n        ></el-cascader>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import Api from \"@/assets/api/Api\";\r\n    import CollectionUtil from \"@/util/CollectionUtil\";\r\n\r\n    export default {\r\n        name: \"WarehouseSelector\",\r\n        components: {},\r\n        props: {\r\n            value: {\r\n                default: 0\r\n            },\r\n            isFilter: {\r\n                default: false\r\n            },\r\n            level: {\r\n                default: 1\r\n            },\r\n            visible: {\r\n                default: true\r\n            },\r\n            width: {\r\n                default: '200px'\r\n            },\r\n            filterIds: {\r\n                default() {\r\n                    return [];\r\n                }\r\n            },\r\n            needFilter: {\r\n                default :false\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                warehouses: [],\r\n                reservoirs: [],\r\n                stocks: [],\r\n                tree: [],\r\n                selectArray: []\r\n            }\r\n        },\r\n        mounted() {\r\n            this.reload();\r\n        },\r\n        methods: {\r\n            reload() {\r\n                this.refreshList();\r\n                this.change(this.isFilter ? 0 : null);\r\n            },\r\n            change(v) {\r\n                this.$emit('input', v);\r\n            },\r\n            refreshList() {\r\n                this.$ajax.request(Api.warehouse.warSelectAll).then(resp => {\r\n                    this.warehouses = resp;\r\n                    if (this.level > 1) {\r\n                        return this.$ajax.request(Api.warehouse.resSelectAll);\r\n                    }\r\n                }).then(resp => {\r\n                    this.reservoirs = resp;\r\n                    if (this.level > 2) {\r\n                        return this.$ajax.request(Api.warehouse.stockSelectAll);\r\n                    }\r\n                }).then(resp => {\r\n                    this.stocks = resp;\r\n                }).finally(() => this.createTree())\r\n            },\r\n\r\n            createTree() {\r\n                this.tree = CollectionUtil.listToTreeByTwoList(\r\n                    this.warehouses,\r\n                    CollectionUtil.listToTreeByTwoList(this.reservoirs, this.stocks, 'reservoirId'),\r\n                    'warehouseId'\r\n                );\r\n                if (this.isFilter) {\r\n                    this.tree = [{\r\n                        id: 0,\r\n                        name: '全部'\r\n                    }].concat(this.tree);\r\n                } else if ( this.needFilter || this.filterIds.length) {\r\n                    this.tree = CollectionUtil.filterTree(this.tree, x => this.filterIds.includes(x.id), 'children', 3);\r\n                }\r\n                this.refreshSelect();\r\n            },\r\n\r\n            refreshSelect() {\r\n                this.selectArray = CollectionUtil.getTreeRoute(this.tree, x => x.id === this.value, 'id', 'children', this.level);\r\n            },\r\n\r\n            itemChange(nodes) {\r\n                if ( !this.isFilter && nodes.length < this.level) return;\r\n                this.$emit('input', nodes.length !== this.level ? 0 : nodes[nodes.length - 1]);\r\n                this.$emit('change', nodes);\r\n            }\r\n\r\n        },\r\n        watch: {\r\n            visible(v) {\r\n                if (v) {\r\n                    this.refreshList();\r\n                }\r\n            },\r\n            value() {\r\n                this.refreshSelect();\r\n            },\r\n            filterIds() {\r\n                this.createTree();\r\n            }\r\n        },\r\n        computed: {\r\n            valueUse() {\r\n                if (this.value) {\r\n                    return this.value;\r\n                }\r\n                return this.isFilter ? 0 : null;\r\n            },\r\n            plcText() {\r\n                return '请选择' + ['仓库', '仓位', '货架'][this.level - 1]\r\n            }\r\n        },\r\n\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    @import (reference) \"~style/all.less\";\r\n\r\n    .WarehouseSelector {\r\n    }\r\n</style>"]}]}