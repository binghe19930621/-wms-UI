{"remainingRequest":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\SKWMS\\wms-ui\\src\\components\\layout-component\\TablePanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\SKWMS\\wms-ui\\src\\components\\layout-component\\TablePanel.vue","mtime":1585370815920},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ElPaginationUse from \"@/components/common/ElPaginationUse\";\nimport ElementUtil from \"@/util/ElementUtil\";\nimport PaginateModel from \"@/project/model/PaginateModel\";\nimport CollectionUtil from \"@/util/CollectionUtil\";\nimport ElButtonMini from \"@/components/common/button/ElButtonMini\";\n\nexport default {\n    name: \"TablePanel\",\n    components: {ElButtonMini, ElPaginationUse},\n    props: {\n        data: {\n            default() {\n                return []\n            }\n        },\n        loading: {\n            default: false\n        },\n        paginate: {\n            default() {\n                return new PaginateModel()\n            }\n        },\n        operateShow: {\n            default: true\n        },\n        fixed: {\n            default: 'left'\n        },\n        operateWidth: {\n            default: '100'\n        },\n        selectedRow: {\n            default() {\n                return [];\n            }\n        },\n        columnListWidth: {\n            default: '120'\n        },\n        createUserShow: {\n            default: false,\n        },\n        updateUserShow: {\n            default: false\n        },\n        showAllWarehouse: {\n            default: false,\n        },\n        showWarehouse: {\n            default: false,\n        },\n        showReservoir: {\n            default: false,\n        },\n        showStock: {\n            default: false\n        },\n        showPaginate: {\n            default: true\n        },\n        fixHeight: {\n            default: null\n        },\n        sortable: {\n            default: 'custom'\n        },\n        showIndex: {\n            default: true,\n        },\n        showSelection: {\n            default: true\n        }\n    },\n    data() {\n        return {\n            height: 300,\n            showColumnList: false,\n            checkFieldList: [],\n            columns: [],\n        }\n    },\n    mounted() {\n        this.reload();\n        this.columns = this.$refs.table.store.states.columns.concat([]);\n        this.$nextTick(() => {\n            this.resizeHeight();\n        });\n    },\n    methods: {\n        reload() {\n        },\n\n        resizeHeight() {\n            if (ElementUtil.isHidden(this.$refs.container)) return;\n            this.height = 0;\n            this.$nextTick(() => {\n                this.height = this.fixHeight ? this.fixHeight : this.$refs.container.offsetHeight - 70;\n            });\n        },\n        handleSelectionChange(nodes) {\n            this.updateSelectedRow(nodes);\n            this.$emit('selection-change', nodes)\n        },\n        rowIndex(index) {\n            if (!this.showPaginate) {\n                return index + 1;\n            }\n            return this.paginate.startRow + index;\n        },\n        selectRows() {\n            this.data.forEach(row => {\n                this.$refs.table.toggleRowSelection(row,\n                    !!this.selectedRow.find(r => r === row)\n                );\n            });\n        },\n        dblClickRow(row) {\n            this.updateSelectedRow(CollectionUtil.mergeDiff(this.selectedRow, [row]))\n        },\n        updateSelectedRow(nodes) {\n            this.$emit('update:selectedRow', nodes);\n        },\n        sortChange(column, prop, order) {\n            this.$emit('sort-change', column, prop, order);\n        },\n        hiddenField() {\n            document.querySelectorAll(\".\" + this.columns[0].id).forEach(t => {\n                t.style.visiblity = 'hidden';\n            });\n        },\n        doLayOut() {\n            this.$refs.table.doLayout();\n        }\n    },\n\n    watch: {\n        data() {\n            this.resizeHeight();\n        },\n        selectedRow() {\n            this.selectRows();\n        },\n        checkFieldList(v) {\n            this.hiddenField();\n        }\n    },\n    computed: {\n        resize() {\n            return this.$store.state.searchShowHidden;\n        },\n        columnListCheckbox() {\n            return this.columns.filter(c => {\n                return c.type === 'default' && !c.fixed\n            }).map(c => c.label)\n        }\n    },\n\n}\n",{"version":3,"sources":["TablePanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"TablePanel.vue","sourceRoot":"src/components/layout-component","sourcesContent":["<template>\r\n    <div class=\"TablePanel h100p\"\r\n         ref=\"container\"\r\n    >\r\n        <div class=\"el-card box-card is-always-shadow\">\r\n            <div class=\"flex-box flex-column ma-xs \">\r\n                <el-table\r\n                        :data=\"data\"\r\n                        :max-height=\"height\"\r\n                        v-loading=\"loading\"\r\n                        border\r\n                        :height=\"fixHeight\"\r\n                        style=\"width: 100%;\"\r\n                        @selection-change=\"handleSelectionChange\"\r\n                        ref=\"table\"\r\n                        @row-dblclick=\"dblClickRow\"\r\n                        @sort-change=\"sortChange\"\r\n                >\r\n                    <el-table-column\r\n                            type=\"index\"\r\n                            fixed=\"left\"\r\n                            :index=\"rowIndex\"\r\n                            width=\"60\"\r\n                            v-if=\"showIndex\"\r\n                    ></el-table-column>\r\n                    <el-table-column\r\n                            type=\"selection\"\r\n                            width=\"43\"\r\n                            fixed=\"left\"\r\n                            v-if=\"showSelection\"\r\n                    ></el-table-column>\r\n                    <el-table-column\r\n                            label=\"操作\"\r\n                            :fixed=\"fixed\"\r\n                            :width=\"operateWidth\"\r\n                            v-if=\"operateShow\"\r\n                    >\r\n                        <template slot-scope=\"scope\">\r\n                            <slot name=\"operate\" :row=\"scope.row\"></slot>\r\n                        </template>\r\n                    </el-table-column>\r\n                    <slot></slot>\r\n                    <el-table-column\r\n                            prop=\"warehouseId\"\r\n                            label=\"仓库\"\r\n                            :sortable=\"sortable\"\r\n                            width=\"140\"\r\n                            :show-overflow-tooltip=\"true\"\r\n                            v-if=\"showAllWarehouse || showWarehouse\"\r\n                    >\r\n                        <template slot-scope=\"{row}\">({{ row.warehouseCode }}){{ row.warehouseName }}</template>\r\n                    </el-table-column>\r\n                    <el-table-column\r\n                            prop=\"reservoirId\"\r\n                            label=\"库区\"\r\n                            :sortable=\"sortable\"\r\n                            width=\"140\"\r\n                            :show-overflow-tooltip=\"true\"\r\n                            v-if=\"showAllWarehouse || showReservoir\"\r\n                    >\r\n                        <template slot-scope=\"{row}\">({{ row.reservoirCode }}){{ row.reservoirName }}</template>\r\n                    </el-table-column>\r\n                    <el-table-column\r\n                            prop=\"stockId\"\r\n                            label=\"货架\"\r\n                            :sortable=\"sortable\"\r\n                            width=\"140\"\r\n                            :show-overflow-tooltip=\"true\"\r\n                            v-if=\"showAllWarehouse || showStock\"\r\n                    >\r\n                        <template slot-scope=\"{row}\">({{ row.stockCode }}){{ row.stockName }}</template>\r\n                    </el-table-column>\r\n                    <el-table-column\r\n                            prop=\"createUid\"\r\n                            label=\"创建人\"\r\n                            :sortable=\"sortable\"\r\n                            width=\"100\"\r\n                            v-if=\"createUserShow\"\r\n                    >\r\n                        <template slot-scope=\"{row}\">{{ row.createUserName }}</template>\r\n                    </el-table-column>\r\n                    <el-table-column\r\n                            prop=\"createTime\"\r\n                            label=\"创建时间\"\r\n                            :sortable=\"sortable\"\r\n                            width=\"140\"\r\n                            v-if=\"createUserShow\"\r\n                    ></el-table-column>\r\n                    <el-table-column\r\n                            prop=\"updateUid\"\r\n                            label=\"修改人\"\r\n                            :sortable=\"sortable\"\r\n                            width=\"100\"\r\n                            v-if=\"updateUserShow\"\r\n                    >\r\n                        <template slot-scope=\"{row}\">{{ row.updateUserName }}</template>\r\n                    </el-table-column>\r\n\r\n                    <el-table-column\r\n                            prop=\"updateTime\"\r\n                            label=\"修改时间\"\r\n                            :sortable=\"sortable\"\r\n                            width=\"140\"\r\n                            v-if=\"updateUserShow\"\r\n                    ></el-table-column>\r\n                </el-table>\r\n                <div class=\"flex-box mt-xs flex-center\">\r\n                    <div class=\"flex-grow\">\r\n\r\n                    </div>\r\n                    <div class=\"pr-sm\">\r\n                        <el-popover\r\n                                placement=\"top\"\r\n                                :width=\"columnListWidth\"\r\n                                v-model=\"showColumnList\"\r\n                                v-if=\"false\"\r\n                        >\r\n                            <el-checkbox-group v-model=\"checkFieldList\">\r\n                                <el-checkbox\r\n                                        :label=\"item\" v-for=\"item in columnListCheckbox\"\r\n                                        :key=\"item\"\r\n                                        class=\"disp-b\"\r\n                                ></el-checkbox>\r\n                            </el-checkbox-group>\r\n                            <el-button\r\n                                    class=\"only-icon\"\r\n                                    slot=\"reference\"\r\n                                    icon=\"iconfont icon-th-list\"\r\n                            >\r\n                            </el-button>\r\n                        </el-popover>\r\n                        <slot name=\"buttons\"></slot>\r\n                    </div>\r\n                    <div class=\"\" v-if=\"showPaginate\">\r\n                        <el-pagination-use\r\n                                :paginate=\"paginate\"\r\n                        ></el-pagination-use>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import ElPaginationUse from \"@/components/common/ElPaginationUse\";\r\n    import ElementUtil from \"@/util/ElementUtil\";\r\n    import PaginateModel from \"@/project/model/PaginateModel\";\r\n    import CollectionUtil from \"@/util/CollectionUtil\";\r\n    import ElButtonMini from \"@/components/common/button/ElButtonMini\";\r\n\r\n    export default {\r\n        name: \"TablePanel\",\r\n        components: {ElButtonMini, ElPaginationUse},\r\n        props: {\r\n            data: {\r\n                default() {\r\n                    return []\r\n                }\r\n            },\r\n            loading: {\r\n                default: false\r\n            },\r\n            paginate: {\r\n                default() {\r\n                    return new PaginateModel()\r\n                }\r\n            },\r\n            operateShow: {\r\n                default: true\r\n            },\r\n            fixed: {\r\n                default: 'left'\r\n            },\r\n            operateWidth: {\r\n                default: '100'\r\n            },\r\n            selectedRow: {\r\n                default() {\r\n                    return [];\r\n                }\r\n            },\r\n            columnListWidth: {\r\n                default: '120'\r\n            },\r\n            createUserShow: {\r\n                default: false,\r\n            },\r\n            updateUserShow: {\r\n                default: false\r\n            },\r\n            showAllWarehouse: {\r\n                default: false,\r\n            },\r\n            showWarehouse: {\r\n                default: false,\r\n            },\r\n            showReservoir: {\r\n                default: false,\r\n            },\r\n            showStock: {\r\n                default: false\r\n            },\r\n            showPaginate: {\r\n                default: true\r\n            },\r\n            fixHeight: {\r\n                default: null\r\n            },\r\n            sortable: {\r\n                default: 'custom'\r\n            },\r\n            showIndex: {\r\n                default: true,\r\n            },\r\n            showSelection: {\r\n                default: true\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                height: 300,\r\n                showColumnList: false,\r\n                checkFieldList: [],\r\n                columns: [],\r\n            }\r\n        },\r\n        mounted() {\r\n            this.reload();\r\n            this.columns = this.$refs.table.store.states.columns.concat([]);\r\n            this.$nextTick(() => {\r\n                this.resizeHeight();\r\n            });\r\n        },\r\n        methods: {\r\n            reload() {\r\n            },\r\n\r\n            resizeHeight() {\r\n                if (ElementUtil.isHidden(this.$refs.container)) return;\r\n                this.height = 0;\r\n                this.$nextTick(() => {\r\n                    this.height = this.fixHeight ? this.fixHeight : this.$refs.container.offsetHeight - 70;\r\n                });\r\n            },\r\n            handleSelectionChange(nodes) {\r\n                this.updateSelectedRow(nodes);\r\n                this.$emit('selection-change', nodes)\r\n            },\r\n            rowIndex(index) {\r\n                if (!this.showPaginate) {\r\n                    return index + 1;\r\n                }\r\n                return this.paginate.startRow + index;\r\n            },\r\n            selectRows() {\r\n                this.data.forEach(row => {\r\n                    this.$refs.table.toggleRowSelection(row,\r\n                        !!this.selectedRow.find(r => r === row)\r\n                    );\r\n                });\r\n            },\r\n            dblClickRow(row) {\r\n                this.updateSelectedRow(CollectionUtil.mergeDiff(this.selectedRow, [row]))\r\n            },\r\n            updateSelectedRow(nodes) {\r\n                this.$emit('update:selectedRow', nodes);\r\n            },\r\n            sortChange(column, prop, order) {\r\n                this.$emit('sort-change', column, prop, order);\r\n            },\r\n            hiddenField() {\r\n                document.querySelectorAll(\".\" + this.columns[0].id).forEach(t => {\r\n                    t.style.visiblity = 'hidden';\r\n                });\r\n            },\r\n            doLayOut() {\r\n                this.$refs.table.doLayout();\r\n            }\r\n        },\r\n\r\n        watch: {\r\n            data() {\r\n                this.resizeHeight();\r\n            },\r\n            selectedRow() {\r\n                this.selectRows();\r\n            },\r\n            checkFieldList(v) {\r\n                this.hiddenField();\r\n            }\r\n        },\r\n        computed: {\r\n            resize() {\r\n                return this.$store.state.searchShowHidden;\r\n            },\r\n            columnListCheckbox() {\r\n                return this.columns.filter(c => {\r\n                    return c.type === 'default' && !c.fixed\r\n                }).map(c => c.label)\r\n            }\r\n        },\r\n\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    @import (reference) \"~style/all.less\";\r\n\r\n    .TablePanel {\r\n    }\r\n</style>"]}]}