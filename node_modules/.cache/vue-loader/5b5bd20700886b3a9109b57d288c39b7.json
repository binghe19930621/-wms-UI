{"remainingRequest":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\SKWMS\\wms-ui\\src\\components\\page-content\\enum-selector\\MaterialSelector.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\SKWMS\\wms-ui\\src\\components\\page-content\\enum-selector\\MaterialSelector.vue","mtime":1585370815946},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Api from \"@/assets/api/Api\";\nimport CollectionUtil from \"@/util/CollectionUtil\";\n\nexport default {\n    name: \"MaterialSelector\",\n    components: {},\n    props: {\n        types: {\n            default: ''\n        },\n        value: {\n            default: 0\n        },\n        width: {\n            default: '200px'\n        },\n        filterIds: {\n            default() {\n                return [];\n            }\n        },\n        needFilter:{\n            default : false\n        }\n    },\n    data() {\n        return {\n            materials: []\n        }\n    },\n    mounted() {\n        this.reload();\n    },\n    methods: {\n        reload() {\n            this.refreshList();\n        },\n        refreshList() {\n            this.$ajax.request(Api.material.selectByType, {\n                types: this.types\n            }).then(resp => {\n                this.materials = resp;\n            });\n        },\n        change(a) {\n            if (!a) return;\n            this.$emit('input', a[a.length - 1]);\n        }\n    },\n    watch: {},\n    computed: {\n        materialTree() {\n            let tree = [];\n            this.materials.forEach(m => {\n                let fn = tree.find(f => {\n                    return m.categoryId === f.id\n                });\n                if (fn) {\n                    fn.children.push(m);\n                } else {\n                    let f = {\n                        id: m.categoryId,\n                        name: m.categoryName,\n                        children: [m]\n                    };\n                    tree.push(f);\n                }\n            });\n            if( this.needFilter || this.filterIds.length){\n                tree = CollectionUtil.filterTree(tree, x => this.filterIds.includes(x.id), 'children', 2);\n            }\n            return tree;\n        },\n        valueUse() {\n            let c = this.materials.find(x => x.id === this.value);\n            if (!c) return [];\n            return [c.categoryId, c.id];\n        }\n    },\n\n}\n",{"version":3,"sources":["MaterialSelector.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"MaterialSelector.vue","sourceRoot":"src/components/page-content/enum-selector","sourcesContent":["<template>\r\n    <div class=\"MaterialSelector\">\r\n        <el-cascader\r\n                :style=\"{'width' : width}\"\r\n                :options=\"materialTree\"\r\n                :show-all-levels=\"true\"\r\n                :props=\"{'value': 'id', 'label' : 'name'}\"\r\n                :value=\"valueUse\"\r\n                @input=\"change\"\r\n        ></el-cascader>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import Api from \"@/assets/api/Api\";\r\n    import CollectionUtil from \"@/util/CollectionUtil\";\r\n\r\n    export default {\r\n        name: \"MaterialSelector\",\r\n        components: {},\r\n        props: {\r\n            types: {\r\n                default: ''\r\n            },\r\n            value: {\r\n                default: 0\r\n            },\r\n            width: {\r\n                default: '200px'\r\n            },\r\n            filterIds: {\r\n                default() {\r\n                    return [];\r\n                }\r\n            },\r\n            needFilter:{\r\n                default : false\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                materials: []\r\n            }\r\n        },\r\n        mounted() {\r\n            this.reload();\r\n        },\r\n        methods: {\r\n            reload() {\r\n                this.refreshList();\r\n            },\r\n            refreshList() {\r\n                this.$ajax.request(Api.material.selectByType, {\r\n                    types: this.types\r\n                }).then(resp => {\r\n                    this.materials = resp;\r\n                });\r\n            },\r\n            change(a) {\r\n                if (!a) return;\r\n                this.$emit('input', a[a.length - 1]);\r\n            }\r\n        },\r\n        watch: {},\r\n        computed: {\r\n            materialTree() {\r\n                let tree = [];\r\n                this.materials.forEach(m => {\r\n                    let fn = tree.find(f => {\r\n                        return m.categoryId === f.id\r\n                    });\r\n                    if (fn) {\r\n                        fn.children.push(m);\r\n                    } else {\r\n                        let f = {\r\n                            id: m.categoryId,\r\n                            name: m.categoryName,\r\n                            children: [m]\r\n                        };\r\n                        tree.push(f);\r\n                    }\r\n                });\r\n                if( this.needFilter || this.filterIds.length){\r\n                    tree = CollectionUtil.filterTree(tree, x => this.filterIds.includes(x.id), 'children', 2);\r\n                }\r\n                return tree;\r\n            },\r\n            valueUse() {\r\n                let c = this.materials.find(x => x.id === this.value);\r\n                if (!c) return [];\r\n                return [c.categoryId, c.id];\r\n            }\r\n        },\r\n\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    @import (reference) \"~style/all.less\";\r\n\r\n    .MaterialSelector {\r\n    }\r\n</style>"]}]}