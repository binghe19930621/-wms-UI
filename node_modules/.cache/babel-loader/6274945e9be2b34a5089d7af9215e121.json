{"remainingRequest":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js!E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\项目\\SKWMS\\wms-ui\\src\\store\\stores.js","dependencies":[{"path":"E:\\项目\\SKWMS\\wms-ui\\src\\store\\stores.js","mtime":1585370816081},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import store_state from \"@/store/stores_state\";\nvar state = store_state;\nvar mutations = {};\nvar actions = {};\n\nvar _loop = function _loop(k) {\n  var key = 'set' + k.substring(0, 1).toUpperCase() + k.substring(1);\n\n  mutations[key] = function (state, value) {\n    state[k] = value;\n  };\n\n  actions[key] = function (context, value) {\n    context.commit(key, value);\n  };\n};\n\nfor (var k in state) {\n  _loop(k);\n}\n\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions\n};",{"version":3,"sources":["E:\\项目\\SKWMS\\wms-ui\\src\\store\\stores.js"],"names":["store_state","state","mutations","actions","k","key","substring","toUpperCase","value","context","commit"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,sBAAxB;AAEA,IAAMC,KAAK,GAAGD,WAAd;AACA,IAAIE,SAAS,GAAG,EAAhB;AACA,IAAIC,OAAO,GAAG,EAAd;;2BACSC,C;AACL,MAAIC,GAAG,GAAG,QAAQD,CAAC,CAACE,SAAF,CAAY,CAAZ,EAAe,CAAf,EAAkBC,WAAlB,EAAR,GAA0CH,CAAC,CAACE,SAAF,CAAY,CAAZ,CAApD;;AACAJ,EAAAA,SAAS,CAACG,GAAD,CAAT,GAAiB,UAACJ,KAAD,EAAQO,KAAR,EAAkB;AAC/BP,IAAAA,KAAK,CAACG,CAAD,CAAL,GAAWI,KAAX;AACH,GAFD;;AAGAL,EAAAA,OAAO,CAACE,GAAD,CAAP,GAAe,UAACI,OAAD,EAAUD,KAAV,EAAoB;AAC/BC,IAAAA,OAAO,CAACC,MAAR,CAAeL,GAAf,EAAoBG,KAApB;AACH,GAFD;;;AALJ,KAAK,IAAIJ,CAAT,IAAcH,KAAd,EAAqB;AAAA,QAAZG,CAAY;AAQpB;;AAED,eAAe;AACXH,EAAAA,KAAK,EAALA,KADW;AACJC,EAAAA,SAAS,EAATA,SADI;AACOC,EAAAA,OAAO,EAAPA;AADP,CAAf","sourcesContent":["import store_state from \"@/store/stores_state\";\r\n\r\nconst state = store_state;\r\nlet mutations = {};\r\nlet actions = {};\r\nfor (let k in state) {\r\n    let key = 'set' + k.substring(0, 1).toUpperCase() + k.substring(1);\r\n    mutations[key] = (state, value) => {\r\n        state[k] = value;\r\n    };\r\n    actions[key] = (context, value) => {\r\n        context.commit(key, value);\r\n    };\r\n}\r\n\r\nexport default {\r\n    state, mutations, actions\r\n}"]}]}