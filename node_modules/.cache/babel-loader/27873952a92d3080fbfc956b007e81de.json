{"remainingRequest":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js!E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\项目\\SKWMS\\wms-ui\\src\\util\\AjaxUtil.js","dependencies":[{"path":"E:\\项目\\SKWMS\\wms-ui\\src\\util\\AjaxUtil.js","mtime":1585377568097},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Map from \"E:\\\\\\u9879\\u76EE\\\\SKWMS\\\\wms-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/map\";\nimport _Object$assign from \"E:\\\\\\u9879\\u76EE\\\\SKWMS\\\\wms-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/assign\";\nimport _Promise from \"E:\\\\\\u9879\\u76EE\\\\SKWMS\\\\wms-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport _JSON$stringify from \"E:\\\\\\u9879\\u76EE\\\\SKWMS\\\\wms-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nimport _typeof from \"E:\\\\\\u9879\\u76EE\\\\SKWMS\\\\wms-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/typeof\";\nimport _classCallCheck from \"E:\\\\\\u9879\\u76EE\\\\SKWMS\\\\wms-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\\\u9879\\u76EE\\\\SKWMS\\\\wms-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"E:\\\\\\u9879\\u76EE\\\\SKWMS\\\\wms-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport Config from \"@/assets/Config\";\nimport axios from 'axios';\nimport ResponseCodeHandle from \"@/project/ResponseCodeHandle\";\nimport UserHandle from \"@/project/user/UserHandle\";\nimport DialogUtil from \"@/util/DialogUtil\";\nimport StatesContainer from \"@/project/StatesContainer\";\n\nvar AjaxUtil =\n/*#__PURE__*/\nfunction () {\n  function AjaxUtil() {\n    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, AjaxUtil);\n\n    _defineProperty(this, \"option\", {});\n\n    _defineProperty(this, \"_requestErrorHandler\", function (err) {\n      if (_typeof(err) === 'object' && err.status) {\n        StatesContainer.info.ajaxErrorInfo = err.data;\n\n        if (err.status !== 200) {\n          DialogUtil.toastError(\"\\u672A\\u77E5\\u9519\\u8BEF[code:\".concat(err.status, \"]\"));\n          StatesContainer.layout.errorWindowVisible = true;\n        }\n      }\n    });\n\n    /**\r\n     * axios 配置选项\r\n     */\n    this.option = {\n      baseURL: Config.domain,\n      method: 'post',\n      url: url,\n      data: params,\n      contentType: \"application/json\",\n      responseType: 'text',\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Type': 'application/json'\n      },\n      validateStatus: function validateStatus(status) {\n        return true;\n      }\n    };\n    this.option.transformRequest = [function (d, h) {\n      return _JSON$stringify(d); // return this._transformRequest(d, h);\n    }];\n    this.responseCodeHandel = new ResponseCodeHandle();\n    this._ajaxIndex = ++AjaxUtil._ajaxCount;\n  }\n  /**\r\n   * 在 data 提交之前的预处理函数\r\n   * @param data\r\n   * @param header\r\n   * @returns {string}\r\n   * @private\r\n   */\n\n\n  _createClass(AjaxUtil, [{\n    key: \"_transformRequest\",\n    value: function _transformRequest(data, header) {\n      return this._urlEncode(data);\n    }\n    /**\r\n     * 快速POST操作函数\r\n     * @param url   url 地址\r\n     * @param params 参数\r\n     */\n\n  }, {\n    key: \"request\",\n\n    /**\r\n     * 请求函数\r\n     * 发情向服务器的请求\r\n     * 在此之前必须配置好其他参数\r\n     * @returns {Promise<AxiosResponse<any> | never>}\r\n     */\n    value: function request() {\n      var _this = this;\n\n      this._printRequest();\n\n      this._urlFormat();\n\n      this.setGlobalHeader();\n      return axios.request(this.option).then(function (resp) {\n        return _this._thenHandle(resp);\n      }).catch(function (err) {\n        _this._requestErrorHandler(err);\n\n        return _Promise.reject(err);\n      });\n    }\n    /**\r\n     * 请求错误情况返回\r\n     * 处理AJAX错误情况\r\n     * 如果错误为 http 状态码错误，则打开错误详情窗口\r\n     */\n\n  }, {\n    key: \"setGlobalHeader\",\n\n    /**\r\n     * 设置全局 header 头部\r\n     * 用户 token 追加到Header验证字段(Authorization)\r\n     */\n    value: function setGlobalHeader() {\n      if (UserHandle.isLogin()) {\n        this.setHeaders({\n          'Authorization': UserHandle.getLoginUser().token\n        });\n      }\n    }\n    /**\r\n     * url格式化\r\n     * 检查 请求 method 是否为 get\r\n     * 是的话将 参数 urlEncode 之后追加到 url 地址中\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_urlFormat\",\n    value: function _urlFormat() {\n      var query = this._urlEncode(this.option.data);\n\n      if (this.option.method === 'get') {\n        this.option.url += '?' + query;\n      }\n    }\n    /**\r\n     * ajax 请求正常返回处理\r\n     * 将 resp.data 交给项目 code 解析函数解析\r\n     * @param resp\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_thenHandle\",\n    value: function _thenHandle(resp) {\n      if (resp.status !== 200) {\n        throw resp;\n      }\n\n      var res = this.responseCodeHandel.validate(resp.data);\n      var ret = null;\n\n      if (res) {\n        ret = _Promise.resolve(res.data);\n      } else {\n        res = this.responseCodeHandel.getJson();\n        ret = _Promise.reject(resp);\n      }\n\n      this._printResponse(res);\n\n      return ret;\n    }\n    /**\r\n     * 打印响应结果\r\n     * @param res\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_printResponse\",\n    value: function _printResponse(res) {\n      console.log({\n        ajaxId: this._ajaxIndex + '_resp',\n        fromUrl: this.option.url,\n        response: res,\n        option: this.option\n      });\n    }\n    /**\r\n     * 打印请求信息\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_printRequest\",\n    value: function _printRequest() {\n      console.log({\n        ajaxId: this._ajaxIndex + '',\n        toUrl: this.option.url,\n        request: this.option.data,\n        option: this.option\n      });\n    }\n    /**\r\n     * 设置常规信息\r\n     * @param url   接口地址\r\n     * @param params    参数\r\n     * @param method    请求方法\r\n     */\n\n  }, {\n    key: \"setNormalInfo\",\n    value: function setNormalInfo(url, params) {\n      var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'post';\n      this.option.url = url;\n      this.option.data = params;\n      this.option.method = method;\n      return this;\n    }\n    /**\r\n     * 设置 axios 的头信息\r\n     * @param headers\r\n     */\n\n  }, {\n    key: \"setHeaders\",\n    value: function setHeaders(headers) {\n      this.option.headers = _Object$assign(this.option.headers, headers);\n      return this;\n    }\n    /**\r\n     * url编码\r\n     * 将 JSON 格式转换成 key=value&key=value格式\r\n     * 并将 value 做 url 编码\r\n     * @param param\r\n     * @param key\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"_urlEncode\",\n    value: function _urlEncode(param, key) {\n      var paramStr = \"\";\n\n      if (typeof param === \"string\" || typeof param === 'number' || typeof param === 'boolean') {\n        paramStr += \"&\" + key + \"=\" + encodeURIComponent(param);\n      } else {\n        for (var i in param) {\n          var item = param[i];\n          var k = key == null ? i : key + (true || param instanceof Array ? \"[\" + i + \"]\" : \".\" + i);\n          paramStr += '&' + this._urlEncode(item, k);\n        }\n      }\n\n      return paramStr.substr(1);\n    }\n  }], [{\n    key: \"post\",\n    value: function post(url) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var ajax = new AjaxUtil();\n      ajax.setNormalInfo(url, params, 'post');\n      return ajax.request();\n    }\n    /**\r\n     * 快速 get 操作函数\r\n     * @returns {Promise<AxiosResponse<any>|never>}\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(url) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var ajax = new AjaxUtil();\n      ajax.setNormalInfo(url, params, 'get');\n      return ajax.request();\n    }\n    /**\r\n     * 快速综合请求\r\n     * 使用 Api 配置中的 Api 对象进行请求\r\n     * 如果 api 传入为字符串，直接执行 post 函数\r\n     * 如果为数组：api[0]表示url， api[1]表示 method,\r\n     * 如果为对象：api.url, api.method+\r\n     * @param api\r\n     * @param params\r\n     * @param method\r\n     * @returns {Promise<AxiosResponse<any>|never>}\r\n     */\n\n  }, {\n    key: \"request\",\n    value: function request(api) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var url = '';\n\n      if (api instanceof String) {\n        url = api;\n        method = method || 'post';\n      } else if (api instanceof Array) {\n        url = api[0];\n        method = (api.length > 1 && method == null ? api[1] : method) || 'post';\n      } else if (api instanceof Object) {\n        url = api.url;\n        method = method || api.method;\n      }\n\n      var ajax = new AjaxUtil();\n      ajax.setNormalInfo(url, params, method);\n      return ajax.request();\n    }\n    /**\r\n     * 快速返回一个本类 ajax 对象\r\n     * 可以进行链式操作\r\n     * @returns {AjaxUtil}\r\n     */\n\n  }, {\n    key: \"ajax\",\n    value: function ajax(url, params) {\n      return new AjaxUtil(url, params);\n    }\n  }]);\n\n  return AjaxUtil;\n}();\n\n_defineProperty(AjaxUtil, \"_ajaxCount\", 0);\n\n_defineProperty(AjaxUtil, \"_UrlRequestMap\", new _Map());\n\nexport { AjaxUtil as default };",{"version":3,"sources":["E:\\项目\\SKWMS\\wms-ui\\src\\util\\AjaxUtil.js"],"names":["Config","axios","ResponseCodeHandle","UserHandle","DialogUtil","StatesContainer","AjaxUtil","url","params","err","status","info","ajaxErrorInfo","data","toastError","layout","errorWindowVisible","option","baseURL","domain","method","contentType","responseType","headers","validateStatus","transformRequest","d","h","responseCodeHandel","_ajaxIndex","_ajaxCount","header","_urlEncode","_printRequest","_urlFormat","setGlobalHeader","request","then","resp","_thenHandle","catch","_requestErrorHandler","reject","isLogin","setHeaders","getLoginUser","token","query","res","validate","ret","resolve","getJson","_printResponse","console","log","ajaxId","fromUrl","response","toUrl","param","key","paramStr","encodeURIComponent","i","item","k","Array","substr","ajax","setNormalInfo","api","String","length","Object"],"mappings":"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","sourcesContent":["import Config from \"@/assets/Config\";\r\nimport axios from 'axios';\r\nimport ResponseCodeHandle from \"@/project/ResponseCodeHandle\";\r\nimport UserHandle from \"@/project/user/UserHandle\";\r\nimport DialogUtil from \"@/util/DialogUtil\";\r\nimport StatesContainer from \"@/project/StatesContainer\";\r\n\r\nexport default class AjaxUtil {\r\n\r\n    static _ajaxCount = 0;\r\n    static _UrlRequestMap = new Map();\r\n\r\n    option = {};\r\n\r\n    constructor(url = '', params = {}) {\r\n        /**\r\n         * axios 配置选项\r\n         */\r\n        this.option = {\r\n            baseURL: Config.domain,\r\n            method: 'post',\r\n            url: url,\r\n            data: params,\r\n            contentType: \"application/json\",\r\n            responseType: 'text',\r\n            headers: {\r\n                'X-Requested-With': 'XMLHttpRequest',\r\n                // 'Content-Type': 'application/x-www-form-urlencoded',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            validateStatus: function (status) {\r\n                return true;\r\n            },\r\n        };\r\n        this.option.transformRequest = [(d, h) => {\r\n            return JSON.stringify(d);\r\n            // return this._transformRequest(d, h);\r\n        }];\r\n        this.responseCodeHandel = new ResponseCodeHandle;\r\n        this._ajaxIndex = ++AjaxUtil._ajaxCount;\r\n    }\r\n\r\n    /**\r\n     * 在 data 提交之前的预处理函数\r\n     * @param data\r\n     * @param header\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    _transformRequest(data, header) {\r\n        return this._urlEncode(data);\r\n    }\r\n\r\n    /**\r\n     * 快速POST操作函数\r\n     * @param url   url 地址\r\n     * @param params 参数\r\n     */\r\n    static post(url, params = {}) {\r\n        let ajax = new AjaxUtil();\r\n        ajax.setNormalInfo(url, params, 'post');\r\n        return ajax.request();\r\n    }\r\n\r\n    /**\r\n     * 快速 get 操作函数\r\n     * @returns {Promise<AxiosResponse<any>|never>}\r\n     */\r\n    static get(url, params = {}) {\r\n        let ajax = new AjaxUtil();\r\n        ajax.setNormalInfo(url, params, 'get');\r\n        return ajax.request();\r\n    }\r\n\r\n    /**\r\n     * 快速综合请求\r\n     * 使用 Api 配置中的 Api 对象进行请求\r\n     * 如果 api 传入为字符串，直接执行 post 函数\r\n     * 如果为数组：api[0]表示url， api[1]表示 method,\r\n     * 如果为对象：api.url, api.method+\r\n     * @param api\r\n     * @param params\r\n     * @param method\r\n     * @returns {Promise<AxiosResponse<any>|never>}\r\n     */\r\n    static request(api, params = {}, method = null) {\r\n        let [url] = [''];\r\n        if (api instanceof String) {\r\n            url = api;\r\n            method = method || 'post';\r\n        } else if (api instanceof Array) {\r\n            url = api[0];\r\n            method = (api.length > 1 && method == null ? api[1] : method) || 'post';\r\n        } else if (api instanceof Object) {\r\n            url = api.url;\r\n            method = method || api.method;\r\n        }\r\n        let ajax = new AjaxUtil();\r\n        ajax.setNormalInfo(url, params, method);\r\n        return ajax.request();\r\n    }\r\n\r\n    /**\r\n     * 快速返回一个本类 ajax 对象\r\n     * 可以进行链式操作\r\n     * @returns {AjaxUtil}\r\n     */\r\n    static ajax(url, params) {\r\n        return new AjaxUtil(url, params);\r\n    }\r\n\r\n    /**\r\n     * 请求函数\r\n     * 发情向服务器的请求\r\n     * 在此之前必须配置好其他参数\r\n     * @returns {Promise<AxiosResponse<any> | never>}\r\n     */\r\n    request() {\r\n        this._printRequest();\r\n        this._urlFormat();\r\n        this.setGlobalHeader();\r\n        return axios.request(this.option)\r\n            .then(resp => {\r\n                return this._thenHandle(resp);\r\n            })\r\n            .catch(err => {\r\n                this._requestErrorHandler(err);\r\n                return Promise.reject(err);\r\n            })\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 请求错误情况返回\r\n     * 处理AJAX错误情况\r\n     * 如果错误为 http 状态码错误，则打开错误详情窗口\r\n     */\r\n    _requestErrorHandler = err => {\r\n        if (typeof err === 'object' && err.status) {\r\n            StatesContainer.info.ajaxErrorInfo = err.data;\r\n            if (err.status !== 200) {\r\n                DialogUtil.toastError(`未知错误[code:${err.status}]`);\r\n                StatesContainer.layout.errorWindowVisible = true;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 设置全局 header 头部\r\n     * 用户 token 追加到Header验证字段(Authorization)\r\n     */\r\n    setGlobalHeader() {\r\n        if (UserHandle.isLogin()) {\r\n            this.setHeaders({\r\n                'Authorization': UserHandle.getLoginUser().token\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * url格式化\r\n     * 检查 请求 method 是否为 get\r\n     * 是的话将 参数 urlEncode 之后追加到 url 地址中\r\n     * @private\r\n     */\r\n    _urlFormat() {\r\n        let query = this._urlEncode((this.option.data));\r\n        if (this.option.method === 'get') {\r\n            this.option.url += '?' + query;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ajax 请求正常返回处理\r\n     * 将 resp.data 交给项目 code 解析函数解析\r\n     * @param resp\r\n     * @private\r\n     */\r\n    _thenHandle(resp) {\r\n        if (resp.status !== 200) {\r\n            throw resp;\r\n        }\r\n        let res = this.responseCodeHandel.validate(resp.data);\r\n        let ret = null;\r\n        if (res) {\r\n            ret = Promise.resolve(res.data);\r\n        } else {\r\n            res = this.responseCodeHandel.getJson();\r\n            ret = Promise.reject(resp)\r\n        }\r\n        this._printResponse(res);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * 打印响应结果\r\n     * @param res\r\n     * @private\r\n     */\r\n    _printResponse(res) {\r\n        console.log({\r\n            ajaxId: this._ajaxIndex + '_resp',\r\n            fromUrl: this.option.url,\r\n            response: res,\r\n            option: this.option,\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 打印请求信息\r\n     * @private\r\n     */\r\n    _printRequest() {\r\n        console.log({\r\n            ajaxId: this._ajaxIndex + '',\r\n            toUrl: this.option.url,\r\n            request: this.option.data,\r\n            option: this.option,\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 设置常规信息\r\n     * @param url   接口地址\r\n     * @param params    参数\r\n     * @param method    请求方法\r\n     */\r\n    setNormalInfo(url, params, method = 'post') {\r\n        this.option.url = url;\r\n        this.option.data = params;\r\n        this.option.method = method;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置 axios 的头信息\r\n     * @param headers\r\n     */\r\n    setHeaders(headers) {\r\n        this.option.headers = Object.assign(this.option.headers, headers);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * url编码\r\n     * 将 JSON 格式转换成 key=value&key=value格式\r\n     * 并将 value 做 url 编码\r\n     * @param param\r\n     * @param key\r\n     * @returns {string}\r\n     */\r\n    _urlEncode(param, key) {\r\n        let paramStr = \"\";\r\n        if (typeof param === \"string\" || typeof param === 'number' || typeof param === 'boolean') {\r\n            paramStr += \"&\" + key + \"=\" + encodeURIComponent(param);\r\n        } else {\r\n            for (let i in param) {\r\n                let item = param[i];\r\n                let k = key == null ? i : key + (true || param instanceof Array ? \"[\" + i + \"]\" : \".\" + i);\r\n                paramStr += '&' + this._urlEncode(item, k);\r\n            }\r\n        }\r\n        return paramStr.substr(1);\r\n    }\r\n}"]}]}