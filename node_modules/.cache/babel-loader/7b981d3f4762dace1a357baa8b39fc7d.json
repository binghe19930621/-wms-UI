{"remainingRequest":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js!E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\项目\\SKWMS\\wms-ui\\src\\util\\StringUtil.js","dependencies":[{"path":"E:\\项目\\SKWMS\\wms-ui\\src\\util\\StringUtil.js","mtime":1585370816120},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nexport default {\n  /**\r\n   * 检查是否不包含常规字符\r\n   * 检查是否全部为数字\r\n   * 检查是否为 true 或 false\r\n   * @param v\r\n   * @returns {boolean}\r\n   */\n  isNotString: function isNotString(v) {\n    var l = [/^\\d+$/, /^(true)|(false)$/];\n\n    for (var _i = 0, _l = l; _i < _l.length; _i++) {\n      var reg = _l[_i];\n\n      if (reg.test(v)) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\r\n   * 尝试将字符串转换为本身类型\r\n   * 如 'true' 转换为 true\r\n   * '123123.20' 转换为 123123.2\r\n   * @param v     需要转换的参数\r\n   * @returns {*}\r\n   */\n  tryConvert: function tryConvert(v) {\n    if (this.isNotString(v)) {\n      try {\n        v = eval(v);\n      } catch (e) {}\n    }\n\n    return v;\n  },\n\n  /**\r\n   * 下划线转换驼峰\r\n   * @param field\r\n   * @returns {*}\r\n   */\n  toHump: function toHump(field) {\n    if (!field || field === '') return null;\n    return field.replace(/\\_(\\w)/g, function (all, letter) {\n      return letter.toUpperCase();\n    });\n  },\n\n  /**\r\n   * 驼峰转换下划线\r\n   * @param field\r\n   * @returns {null}\r\n   */\n  toLine: function toLine(field) {\n    if (!field || field === '') return null;\n    return field.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n  }\n};",{"version":3,"sources":["E:\\项目\\SKWMS\\wms-ui\\src\\util\\StringUtil.js"],"names":["isNotString","v","l","reg","test","tryConvert","eval","e","toHump","field","replace","all","letter","toUpperCase","toLine","toLowerCase"],"mappings":";AAAA,eAAe;AAEX;;;;;;;AAOAA,EAAAA,WATW,uBASCC,CATD,EASI;AACX,QAAIC,CAAC,GAAG,CACJ,OADI,EAEJ,kBAFI,CAAR;;AAIA,0BAAgBA,CAAhB,wBAAmB;AAAd,UAAIC,GAAG,SAAP;;AACD,UAAIA,GAAG,CAACC,IAAJ,CAASH,CAAT,CAAJ,EAAiB;AACb,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GApBU;;AAsBX;;;;;;;AAOAI,EAAAA,UA7BW,sBA6BAJ,CA7BA,EA6BG;AACV,QAAI,KAAKD,WAAL,CAAiBC,CAAjB,CAAJ,EAAyB;AACrB,UAAI;AACAA,QAAAA,CAAC,GAAGK,IAAI,CAACL,CAAD,CAAR;AACH,OAFD,CAEE,OAAOM,CAAP,EAAU,CACX;AACJ;;AACD,WAAON,CAAP;AACH,GArCU;;AAsCX;;;;;AAKAO,EAAAA,MA3CW,kBA2CJC,KA3CI,EA2CG;AACV,QAAI,CAACA,KAAD,IAAUA,KAAK,KAAK,EAAxB,EAA4B,OAAO,IAAP;AAC5B,WAAOA,KAAK,CAACC,OAAN,CAAc,SAAd,EAAyB,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AACnD,aAAOA,MAAM,CAACC,WAAP,EAAP;AACH,KAFM,CAAP;AAGH,GAhDU;;AAkDX;;;;;AAKAC,EAAAA,MAvDW,kBAuDJL,KAvDI,EAuDG;AACV,QAAI,CAACA,KAAD,IAAUA,KAAK,KAAK,EAAxB,EAA4B,OAAO,IAAP;AAC5B,WAAOA,KAAK,CAACC,OAAN,CAAc,UAAd,EAA0B,KAA1B,EAAiCK,WAAjC,EAAP;AACH;AA1DU,CAAf","sourcesContent":["export default {\r\n\r\n    /**\r\n     * 检查是否不包含常规字符\r\n     * 检查是否全部为数字\r\n     * 检查是否为 true 或 false\r\n     * @param v\r\n     * @returns {boolean}\r\n     */\r\n    isNotString(v) {\r\n        let l = [\r\n            /^\\d+$/,\r\n            /^(true)|(false)$/\r\n        ];\r\n        for (let reg of l) {\r\n            if (reg.test(v)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * 尝试将字符串转换为本身类型\r\n     * 如 'true' 转换为 true\r\n     * '123123.20' 转换为 123123.2\r\n     * @param v     需要转换的参数\r\n     * @returns {*}\r\n     */\r\n    tryConvert(v) {\r\n        if (this.isNotString(v)) {\r\n            try {\r\n                v = eval(v);\r\n            } catch (e) {\r\n            }\r\n        }\r\n        return v;\r\n    },\r\n    /**\r\n     * 下划线转换驼峰\r\n     * @param field\r\n     * @returns {*}\r\n     */\r\n    toHump(field) {\r\n        if (!field || field === '') return null;\r\n        return field.replace(/\\_(\\w)/g, function (all, letter) {\r\n            return letter.toUpperCase();\r\n        });\r\n    },\r\n\r\n    /**\r\n     * 驼峰转换下划线\r\n     * @param field\r\n     * @returns {null}\r\n     */\r\n    toLine(field) {\r\n        if (!field || field === '') return null;\r\n        return field.replace(/([A-Z])/g, \"_$1\").toLowerCase();\r\n    }\r\n\r\n}\r\n"]}]}