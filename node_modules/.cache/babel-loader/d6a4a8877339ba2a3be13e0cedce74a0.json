{"remainingRequest":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js!E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\项目\\SKWMS\\wms-ui\\src\\util\\UrlUtil.js","dependencies":[{"path":"E:\\项目\\SKWMS\\wms-ui\\src\\util\\UrlUtil.js","mtime":1585370816121},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Object$keys from \"E:\\\\\\u9879\\u76EE\\\\SKWMS\\\\wms-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/keys\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport StringUtil from \"@/util/StringUtil\";\nexport default {\n  /**\r\n   * 获取浏览器的 hash 对象\r\n   * 函数将自动把 #key=value 转换成对象形式\r\n   * 如传递 key 值，则直接返回对象中的 key 对应的值\r\n   * 如果对象中没有 key 则返回 null\r\n   * @param key   需要快速查询的 key\r\n   * @returns {any}\r\n   */\n  hash: function hash() {\n    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var hash = window.location.hash;\n    hash = this.splitKeyValue(hash.replace(/^#/, ''));\n    return key === null ? hash : hash[key] || null;\n  },\n\n  /**\r\n   * 获取浏览器的 query 对象\r\n   * 函数将自动把 ?key=value 转换成对象形式\r\n   * 如传递 key 值，则直接返回对象中的 key 对应的值\r\n   * 如果对象中没有 key 则返回 null\r\n   * @param key   需要快速查询的 key\r\n   * @returns {any}\r\n   */\n  query: function query() {\n    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var query = window.location.search;\n    query = this.splitKeyValue(query.replace(/^\\?/, ''));\n    return key === null ? query : query[key] || null;\n  },\n\n  /**\r\n   * 返回浏览器路径地址\r\n   * 如 http://aaa.com/a/b/c.html 将返回 /a/b/c\r\n   * @returns {string}\r\n   */\n  pathName: function pathName() {\n    return window.location.pathname.replace('.html', '');\n  },\n\n  /**\r\n   * 分割 k=v&k2=v2 字符串为 对象\r\n   * 将自动把类似 '123', 'true' 的字符串转换为 数字和布尔类型\r\n   * @param str   字符串\r\n   * @returns {{}}\r\n   */\n  splitKeyValue: function splitKeyValue(str) {\n    var ret = {};\n    if (str === '') return {};\n    var kvArr = str.split('&');\n    kvArr.map(function (x) {\n      var kv = x.split('=');\n      var v = null;\n\n      if (kv.length > 1) {\n        v = StringUtil.tryConvert(kv[1]);\n      }\n\n      ret[kv[0]] = v;\n    });\n    return ret;\n  },\n\n  /**\r\n   * 将对象转换为 hash 字符串\r\n   * 如 #k=v&k2=v2\r\n   * @param obj\r\n   * @param prefix\r\n   * @returns {string}\r\n   */\n  toHashString: function toHashString(obj) {\n    var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (obj === null || _Object$keys(obj).length === 0) {\n      return '';\n    }\n\n    return (prefix ? '#' : '') + this.objToKeyValue(obj);\n  },\n\n  /**\r\n   * 将对象转换成 query 字符串\r\n   * 带?的字符串\r\n   * @param obj\r\n   * @returns {string}\r\n   */\n  toQueryString: function toQueryString(obj) {\n    if (obj === null || _Object$keys(obj).length === 0) {\n      return '';\n    }\n\n    return '?' + this.objToKeyValue(obj);\n  },\n\n  /**\r\n   * 将对象转换成 key=value 形式\r\n   * @param obj\r\n   * @returns {string}\r\n   */\n  objToKeyValue: function objToKeyValue(obj) {\n    var ret = [];\n\n    for (var k in obj) {\n      ret.push(\"\".concat(k, \"=\").concat(obj[k]));\n    }\n\n    return ret.join('&');\n  }\n};",{"version":3,"sources":["E:\\项目\\SKWMS\\wms-ui\\src\\util\\UrlUtil.js"],"names":["StringUtil","hash","key","window","location","splitKeyValue","replace","query","search","pathName","pathname","str","ret","kvArr","split","map","x","kv","v","length","tryConvert","toHashString","obj","prefix","objToKeyValue","toQueryString","k","push","join"],"mappings":";;;;AAAA,OAAOA,UAAP,MAAuB,mBAAvB;AAEA,eAAe;AAEX;;;;;;;;AAQAC,EAAAA,IAVW,kBAUM;AAAA,QAAZC,GAAY,uEAAN,IAAM;AACb,QAAID,IAAI,GAAGE,MAAM,CAACC,QAAP,CAAgBH,IAA3B;AACAA,IAAAA,IAAI,GAAG,KAAKI,aAAL,CAAmBJ,IAAI,CAACK,OAAL,CAAa,IAAb,EAAmB,EAAnB,CAAnB,CAAP;AACA,WAAOJ,GAAG,KAAK,IAAR,GAAeD,IAAf,GAAuBA,IAAI,CAACC,GAAD,CAAJ,IAAa,IAA3C;AACH,GAdU;;AAgBX;;;;;;;;AAQAK,EAAAA,KAxBW,mBAwBO;AAAA,QAAZL,GAAY,uEAAN,IAAM;AACd,QAAIK,KAAK,GAAGJ,MAAM,CAACC,QAAP,CAAgBI,MAA5B;AACAD,IAAAA,KAAK,GAAG,KAAKF,aAAL,CAAmBE,KAAK,CAACD,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAnB,CAAR;AACA,WAAOJ,GAAG,KAAK,IAAR,GAAeK,KAAf,GAAwBA,KAAK,CAACL,GAAD,CAAL,IAAc,IAA7C;AACH,GA5BU;;AA8BX;;;;;AAKAO,EAAAA,QAnCW,sBAmCA;AACP,WAAON,MAAM,CAACC,QAAP,CAAgBM,QAAhB,CAAyBJ,OAAzB,CAAiC,OAAjC,EAA0C,EAA1C,CAAP;AACH,GArCU;;AAuCX;;;;;;AAMAD,EAAAA,aA7CW,yBA6CGM,GA7CH,EA6CQ;AACf,QAAIC,GAAG,GAAG,EAAV;AACA,QAAID,GAAG,KAAK,EAAZ,EAAgB,OAAO,EAAP;AAChB,QAAIE,KAAK,GAAGF,GAAG,CAACG,KAAJ,CAAU,GAAV,CAAZ;AACAD,IAAAA,KAAK,CAACE,GAAN,CAAU,UAAAC,CAAC,EAAI;AACX,UAAIC,EAAE,GAAGD,CAAC,CAACF,KAAF,CAAQ,GAAR,CAAT;AACA,UAAII,CAAC,GAAG,IAAR;;AACA,UAAID,EAAE,CAACE,MAAH,GAAY,CAAhB,EAAmB;AACfD,QAAAA,CAAC,GAAGlB,UAAU,CAACoB,UAAX,CAAsBH,EAAE,CAAC,CAAD,CAAxB,CAAJ;AACH;;AACDL,MAAAA,GAAG,CAACK,EAAE,CAAC,CAAD,CAAH,CAAH,GAAaC,CAAb;AACH,KAPD;AAQA,WAAON,GAAP;AACH,GA1DU;;AA4DX;;;;;;;AAOAS,EAAAA,YAnEW,wBAmEEC,GAnEF,EAmEuB;AAAA,QAAhBC,MAAgB,uEAAP,IAAO;;AAC9B,QAAID,GAAG,KAAK,IAAR,IAAgB,aAAYA,GAAZ,EAAiBH,MAAjB,KAA4B,CAAhD,EAAmD;AAC/C,aAAO,EAAP;AACH;;AACD,WAAO,CAAEI,MAAM,GAAG,GAAH,GAAS,EAAjB,IAAuB,KAAKC,aAAL,CAAmBF,GAAnB,CAA9B;AACH,GAxEU;;AA0EX;;;;;;AAMAG,EAAAA,aAhFW,yBAgFGH,GAhFH,EAgFQ;AACf,QAAIA,GAAG,KAAK,IAAR,IAAgB,aAAYA,GAAZ,EAAiBH,MAAjB,KAA4B,CAAhD,EAAmD;AAC/C,aAAO,EAAP;AACH;;AACD,WAAO,MAAM,KAAKK,aAAL,CAAmBF,GAAnB,CAAb;AACH,GArFU;;AAuFX;;;;;AAKAE,EAAAA,aA5FW,yBA4FGF,GA5FH,EA4FQ;AACf,QAAIV,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIc,CAAT,IAAcJ,GAAd,EAAmB;AACfV,MAAAA,GAAG,CAACe,IAAJ,WAAYD,CAAZ,cAAiBJ,GAAG,CAACI,CAAD,CAApB;AACH;;AACD,WAAOd,GAAG,CAACgB,IAAJ,CAAS,GAAT,CAAP;AACH;AAlGU,CAAf","sourcesContent":["import StringUtil from \"@/util/StringUtil\";\r\n\r\nexport default {\r\n\r\n    /**\r\n     * 获取浏览器的 hash 对象\r\n     * 函数将自动把 #key=value 转换成对象形式\r\n     * 如传递 key 值，则直接返回对象中的 key 对应的值\r\n     * 如果对象中没有 key 则返回 null\r\n     * @param key   需要快速查询的 key\r\n     * @returns {any}\r\n     */\r\n    hash(key = null) {\r\n        let hash = window.location.hash;\r\n        hash = this.splitKeyValue(hash.replace(/^#/, ''));\r\n        return key === null ? hash : (hash[key] || null);\r\n    },\r\n\r\n    /**\r\n     * 获取浏览器的 query 对象\r\n     * 函数将自动把 ?key=value 转换成对象形式\r\n     * 如传递 key 值，则直接返回对象中的 key 对应的值\r\n     * 如果对象中没有 key 则返回 null\r\n     * @param key   需要快速查询的 key\r\n     * @returns {any}\r\n     */\r\n    query(key = null) {\r\n        let query = window.location.search;\r\n        query = this.splitKeyValue(query.replace(/^\\?/, ''));\r\n        return key === null ? query : (query[key] || null);\r\n    },\r\n\r\n    /**\r\n     * 返回浏览器路径地址\r\n     * 如 http://aaa.com/a/b/c.html 将返回 /a/b/c\r\n     * @returns {string}\r\n     */\r\n    pathName() {\r\n        return window.location.pathname.replace('.html', '');\r\n    },\r\n\r\n    /**\r\n     * 分割 k=v&k2=v2 字符串为 对象\r\n     * 将自动把类似 '123', 'true' 的字符串转换为 数字和布尔类型\r\n     * @param str   字符串\r\n     * @returns {{}}\r\n     */\r\n    splitKeyValue(str) {\r\n        let ret = {};\r\n        if (str === '') return {};\r\n        let kvArr = str.split('&');\r\n        kvArr.map(x => {\r\n            let kv = x.split('=');\r\n            let v = null;\r\n            if (kv.length > 1) {\r\n                v = StringUtil.tryConvert(kv[1]);\r\n            }\r\n            ret[kv[0]] = v;\r\n        });\r\n        return ret;\r\n    },\r\n\r\n    /**\r\n     * 将对象转换为 hash 字符串\r\n     * 如 #k=v&k2=v2\r\n     * @param obj\r\n     * @param prefix\r\n     * @returns {string}\r\n     */\r\n    toHashString(obj, prefix = true ) {\r\n        if (obj === null || Object.keys(obj).length === 0) {\r\n            return '';\r\n        }\r\n        return ( prefix ? '#' : '') + this.objToKeyValue(obj);\r\n    },\r\n\r\n    /**\r\n     * 将对象转换成 query 字符串\r\n     * 带?的字符串\r\n     * @param obj\r\n     * @returns {string}\r\n     */\r\n    toQueryString(obj) {\r\n        if (obj === null || Object.keys(obj).length === 0) {\r\n            return '';\r\n        }\r\n        return '?' + this.objToKeyValue(obj);\r\n    },\r\n\r\n    /**\r\n     * 将对象转换成 key=value 形式\r\n     * @param obj\r\n     * @returns {string}\r\n     */\r\n    objToKeyValue(obj) {\r\n        let ret = [];\r\n        for (let k in obj) {\r\n            ret.push(`${k}=${obj[k]}`);\r\n        }\r\n        return ret.join('&');\r\n    }\r\n\r\n}\r\n"]}]}