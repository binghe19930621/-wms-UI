{"remainingRequest":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js!E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\项目\\SKWMS\\wms-ui\\src\\util\\NumberUtil.js","dependencies":[{"path":"E:\\项目\\SKWMS\\wms-ui\\src\\util\\NumberUtil.js","mtime":1585370816117},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nexport default {\n  numberComma: function numberComma(source) {\n    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n    source = String(source).split(\".\");\n    source[0] = source[0].replace(new RegExp('(\\\\d)(?=(\\\\d{' + length + '})+$)', 'ig'), \"$1,\");\n    return source.join(\".\");\n  },\n  isNumber: function isNumber(number) {\n    try {\n      number = eval(number);\n    } catch (e) {}\n\n    return typeof number === 'number';\n  },\n  strToNumber: function strToNumber(number) {\n    if (this.isNumber(number)) {\n      return number * 1;\n    }\n\n    return number;\n  },\n  price: function price(number) {\n    number = this.strToNumber(number);\n\n    try {\n      number = this.numberComma(number.toFixed(2));\n    } catch (e) {}\n\n    return number;\n  }\n};",{"version":3,"sources":["E:\\项目\\SKWMS\\wms-ui\\src\\util\\NumberUtil.js"],"names":["numberComma","source","length","String","split","replace","RegExp","join","isNumber","number","eval","e","strToNumber","price","toFixed"],"mappings":";;;AAAA,eAAe;AACXA,EAAAA,WADW,uBACCC,MADD,EACqB;AAAA,QAAZC,MAAY,uEAAH,CAAG;AAC5BD,IAAAA,MAAM,GAAGE,MAAM,CAACF,MAAD,CAAN,CAAeG,KAAf,CAAqB,GAArB,CAAT;AACAH,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,CAAUI,OAAV,CAAkB,IAAIC,MAAJ,CAAW,kBAAkBJ,MAAlB,GAA2B,OAAtC,EAA+C,IAA/C,CAAlB,EAAwE,KAAxE,CAAZ;AACA,WAAOD,MAAM,CAACM,IAAP,CAAY,GAAZ,CAAP;AACH,GALU;AAMXC,EAAAA,QANW,oBAMFC,MANE,EAMM;AACb,QAAI;AACAA,MAAAA,MAAM,GAAGC,IAAI,CAACD,MAAD,CAAb;AACH,KAFD,CAEE,OAAOE,CAAP,EAAU,CACX;;AACD,WAAO,OAAOF,MAAP,KAAkB,QAAzB;AACH,GAZU;AAcXG,EAAAA,WAdW,uBAcCH,MAdD,EAcS;AAChB,QAAI,KAAKD,QAAL,CAAcC,MAAd,CAAJ,EAA2B;AACvB,aAAOA,MAAM,GAAG,CAAhB;AACH;;AACD,WAAOA,MAAP;AACH,GAnBU;AAqBXI,EAAAA,KArBW,iBAqBLJ,MArBK,EAqBG;AACVA,IAAAA,MAAM,GAAG,KAAKG,WAAL,CAAiBH,MAAjB,CAAT;;AACA,QAAI;AACAA,MAAAA,MAAM,GAAG,KAAKT,WAAL,CAAiBS,MAAM,CAACK,OAAP,CAAe,CAAf,CAAjB,CAAT;AACH,KAFD,CAEE,OAAOH,CAAP,EAAU,CACX;;AACD,WAAOF,MAAP;AACH;AA5BU,CAAf","sourcesContent":["export default {\r\n    numberComma(source, length = 3) {\r\n        source = String(source).split(\".\");\r\n        source[0] = source[0].replace(new RegExp('(\\\\d)(?=(\\\\d{' + length + '})+$)', 'ig'), \"$1,\");\r\n        return source.join(\".\")\r\n    },\r\n    isNumber(number) {\r\n        try {\r\n            number = eval(number);\r\n        } catch (e) {\r\n        }\r\n        return typeof number === 'number';\r\n    },\r\n\r\n    strToNumber(number) {\r\n        if (this.isNumber(number)) {\r\n            return number * 1;\r\n        }\r\n        return number;\r\n    },\r\n\r\n    price(number) {\r\n        number = this.strToNumber(number);\r\n        try {\r\n            number = this.numberComma(number.toFixed(2))\r\n        } catch (e) {\r\n        }\r\n        return number;\r\n    }\r\n\r\n\r\n}\r\n"]}]}