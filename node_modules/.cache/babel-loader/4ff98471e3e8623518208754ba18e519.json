{"remainingRequest":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js!E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\项目\\SKWMS\\wms-ui\\src\\util\\DialogUtil.js","dependencies":[{"path":"E:\\项目\\SKWMS\\wms-ui\\src\\util\\DialogUtil.js","mtime":1585370816111},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Object$assign from \"E:\\\\\\u9879\\u76EE\\\\SKWMS\\\\wms-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/assign\";\nimport _typeof from \"E:\\\\\\u9879\\u76EE\\\\SKWMS\\\\wms-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/typeof\";\nimport { Message, MessageBox } from \"element-ui\";\nexport default {\n  /**\r\n   * 信息格式化\r\n   * 针对 ajax 响应码进行整理辨别\r\n   * 是字符串则直接打印\r\n   * 是对象这查看对象下是否有 message\r\n   * 有则返回 message 属性\r\n   * @param message\r\n   * @returns {*}\r\n   * @private\r\n   */\n  _messageFormat: function _messageFormat(message) {\n    if (typeof message === 'undefined') {\n      return '消息内容未定义！';\n    }\n\n    if (typeof message === 'string') {\n      return message;\n    }\n\n    if (_typeof(message) === 'object' && message.message) {\n      return message.message;\n    }\n\n    return '提示信息格式错误！';\n  },\n\n  /**\r\n   * 顶部提示默认显示时间\r\n   */\n  _toastDefaultOption: function _toastDefaultOption() {\n    return {\n      type: 'info',\n      showClose: true,\n      duration: 5000\n    };\n  },\n\n  /**\r\n   * 常规顶部显示信息\r\n   * @param message  信息\r\n   * @param option   选型\r\n   */\n  toast: function toast(message) {\n    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var opt = _Object$assign(this._toastDefaultOption(), option);\n\n    opt.message = this._messageFormat(message);\n    return Message(opt);\n  },\n\n  /**\r\n   * 成功显示toast\r\n   * @param message\r\n   * @returns {*}\r\n   */\n  toastSuccess: function toastSuccess(message) {\n    return this.toast(message, {\n      type: 'success'\n    });\n  },\n\n  /**\r\n   * 错误提示\r\n   * @param message\r\n   * @returns {*}\r\n   */\n  toastError: function toastError(message) {\n    return this.toast(message, {\n      type: 'error'\n    });\n  },\n\n  /**\r\n   * 警告提示\r\n   * @param message\r\n   * @returns {*}\r\n   */\n  toastWarning: function toastWarning(message) {\n    return this.toast(message, {\n      type: 'warning'\n    });\n  },\n\n  /**\r\n   * 确认对话框\r\n   * @param message\r\n   * @param title\r\n   * @returns {Promise<MessageBoxData>}\r\n   */\n  confirm: function confirm(message) {\n    var title = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '提示';\n    message = \"\\n            <span class=\\\"word-wrap\\\">\\n                \".concat(message, \"\\n            </span>\\n        \");\n    return MessageBox.confirm(message, title, {\n      confirmButtonText: '确定',\n      cancelButtonText: '取消',\n      type: 'warning',\n      dangerouslyUseHTMLString: true\n    });\n  }\n};",{"version":3,"sources":["E:\\项目\\SKWMS\\wms-ui\\src\\util\\DialogUtil.js"],"names":["Message","MessageBox","_messageFormat","message","_toastDefaultOption","type","showClose","duration","toast","option","opt","toastSuccess","toastError","toastWarning","confirm","title","confirmButtonText","cancelButtonText","dangerouslyUseHTMLString"],"mappings":";;AAAA,SAAQA,OAAR,EAAiBC,UAAjB,QAAkC,YAAlC;AAEA,eAAe;AAEX;;;;;;;;;;AAUAC,EAAAA,cAZW,0BAYIC,OAZJ,EAYa;AACpB,QAAI,OAAOA,OAAP,KAAmB,WAAvB,EAAoC;AAChC,aAAO,UAAP;AACH;;AACD,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,aAAOA,OAAP;AACH;;AACD,QAAI,QAAOA,OAAP,MAAmB,QAAnB,IAA+BA,OAAO,CAACA,OAA3C,EAAoD;AAChD,aAAOA,OAAO,CAACA,OAAf;AACH;;AACD,WAAO,WAAP;AACH,GAvBU;;AAyBX;;;AAGAC,EAAAA,mBA5BW,iCA4BW;AAClB,WAAO;AACHC,MAAAA,IAAI,EAAE,MADH;AAEHC,MAAAA,SAAS,EAAE,IAFR;AAGHC,MAAAA,QAAQ,EAAE;AAHP,KAAP;AAKH,GAlCU;;AAoCX;;;;;AAKAC,EAAAA,KAzCW,iBAyCLL,OAzCK,EAyCiB;AAAA,QAAbM,MAAa,uEAAJ,EAAI;;AACxB,QAAIC,GAAG,GAAG,eAAc,KAAKN,mBAAL,EAAd,EAA0CK,MAA1C,CAAV;;AACAC,IAAAA,GAAG,CAACP,OAAJ,GAAc,KAAKD,cAAL,CAAoBC,OAApB,CAAd;AACA,WAAOH,OAAO,CAACU,GAAD,CAAd;AACH,GA7CU;;AA+CX;;;;;AAKAC,EAAAA,YApDW,wBAoDER,OApDF,EAoDW;AAClB,WAAO,KAAKK,KAAL,CAAWL,OAAX,EAAoB;AACvBE,MAAAA,IAAI,EAAE;AADiB,KAApB,CAAP;AAGH,GAxDU;;AAyDX;;;;;AAKAO,EAAAA,UA9DW,sBA8DAT,OA9DA,EA8DS;AAChB,WAAO,KAAKK,KAAL,CAAWL,OAAX,EAAoB;AACvBE,MAAAA,IAAI,EAAE;AADiB,KAApB,CAAP;AAGH,GAlEU;;AAmEX;;;;;AAKAQ,EAAAA,YAxEW,wBAwEEV,OAxEF,EAwEW;AAClB,WAAO,KAAKK,KAAL,CAAWL,OAAX,EAAoB;AACvBE,MAAAA,IAAI,EAAE;AADiB,KAApB,CAAP;AAGH,GA5EU;;AA8EX;;;;;;AAMAS,EAAAA,OApFW,mBAoFHX,OApFG,EAoFoB;AAAA,QAAdY,KAAc,uEAAN,IAAM;AAC3BZ,IAAAA,OAAO,uEAEGA,OAFH,oCAAP;AAKA,WAAOF,UAAU,CAACa,OAAX,CAAmBX,OAAnB,EAA4BY,KAA5B,EAAmC;AACtCC,MAAAA,iBAAiB,EAAE,IADmB;AAEtCC,MAAAA,gBAAgB,EAAE,IAFoB;AAGtCZ,MAAAA,IAAI,EAAE,SAHgC;AAItCa,MAAAA,wBAAwB,EAAE;AAJY,KAAnC,CAAP;AAMH;AAhGU,CAAf","sourcesContent":["import {Message, MessageBox} from \"element-ui\";\r\n\r\nexport default {\r\n\r\n    /**\r\n     * 信息格式化\r\n     * 针对 ajax 响应码进行整理辨别\r\n     * 是字符串则直接打印\r\n     * 是对象这查看对象下是否有 message\r\n     * 有则返回 message 属性\r\n     * @param message\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    _messageFormat(message) {\r\n        if (typeof message === 'undefined') {\r\n            return '消息内容未定义！';\r\n        }\r\n        if (typeof message === 'string') {\r\n            return message;\r\n        }\r\n        if (typeof message === 'object' && message.message) {\r\n            return message.message;\r\n        }\r\n        return '提示信息格式错误！';\r\n    },\r\n\r\n    /**\r\n     * 顶部提示默认显示时间\r\n     */\r\n    _toastDefaultOption() {\r\n        return {\r\n            type: 'info',\r\n            showClose: true,\r\n            duration: 5000,\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 常规顶部显示信息\r\n     * @param message  信息\r\n     * @param option   选型\r\n     */\r\n    toast(message, option = {}) {\r\n        let opt = Object.assign(this._toastDefaultOption(), option);\r\n        opt.message = this._messageFormat(message);\r\n        return Message(opt);\r\n    },\r\n\r\n    /**\r\n     * 成功显示toast\r\n     * @param message\r\n     * @returns {*}\r\n     */\r\n    toastSuccess(message) {\r\n        return this.toast(message, {\r\n            type: 'success'\r\n        });\r\n    },\r\n    /**\r\n     * 错误提示\r\n     * @param message\r\n     * @returns {*}\r\n     */\r\n    toastError(message) {\r\n        return this.toast(message, {\r\n            type: 'error'\r\n        });\r\n    },\r\n    /**\r\n     * 警告提示\r\n     * @param message\r\n     * @returns {*}\r\n     */\r\n    toastWarning(message) {\r\n        return this.toast(message, {\r\n            type: 'warning'\r\n        });\r\n    },\r\n\r\n    /**\r\n     * 确认对话框\r\n     * @param message\r\n     * @param title\r\n     * @returns {Promise<MessageBoxData>}\r\n     */\r\n    confirm(message, title = '提示') {\r\n        message = `\r\n            <span class=\"word-wrap\">\r\n                ${message}\r\n            </span>\r\n        `;\r\n        return MessageBox.confirm(message, title, {\r\n            confirmButtonText: '确定',\r\n            cancelButtonText: '取消',\r\n            type: 'warning',\r\n            dangerouslyUseHTMLString: true,\r\n        })\r\n    }\r\n\r\n\r\n}"]}]}