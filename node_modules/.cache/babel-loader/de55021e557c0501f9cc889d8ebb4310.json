{"remainingRequest":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js!E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\项目\\SKWMS\\wms-ui\\src\\project\\user\\UserHandle.js","dependencies":[{"path":"E:\\项目\\SKWMS\\wms-ui\\src\\project\\user\\UserHandle.js","mtime":1585370816068},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import VueUtil from \"@/util/VueUtil\";\nimport CacheUtil from \"@/util/CacheUtil\";\nimport AjaxUtil from \"@/util/AjaxUtil\";\nimport Api from \"@/assets/api/Api\";\nimport AuthValidateHandle from \"@/project/user/AuthValidateHandle\";\nexport default {\n  /**\r\n   * 当前登录用户\r\n   */\n  _user: null,\n\n  /**\r\n   * 登录用户在缓存中的key值\r\n   */\n  _cache_key: \"login_user_cache\" + (process.env.NODE_ENV === 'production' ? '_production' : ''),\n\n  /**\r\n   * 设置状态管理器 isLogin 当前状态\r\n   * @param status    登录状态 false ：未登录， true ： 已登录\r\n   * @private\r\n   */\n  _setIsLoginStore: function _setIsLoginStore(status) {\n    VueUtil.getVue().$store.dispatch(\"setIsLogin\", status);\n  },\n\n  /**\r\n   * 设置登录用户\r\n   * 将登录用户写入缓存\r\n   * @param user 用户\r\n   */\n  setLoginUser: function setLoginUser(user) {\n    this._user = user;\n    CacheUtil.set(this._cache_key, user);\n\n    this._setIsLoginStore(!!user);\n  },\n\n  /**\r\n   * 移除登录用户\r\n   * 从缓存中移除登录用户信息\r\n   */\n  removeLoginUser: function removeLoginUser() {\n    this._user = false;\n    CacheUtil.remove(this._cache_key);\n\n    this._setIsLoginStore(false);\n  },\n\n  /**\r\n   * 初始化检查用户是否存在登录缓存\r\n   * 存在则暂时认为用户已经登录并保存用户\r\n   * 用户页面刷新时候进行初始化\r\n   */\n  initCheckUser: function initCheckUser() {\n    var user = CacheUtil.get(this._cache_key, null);\n    this.setLoginUser(user);\n\n    if (!user) {\n      AuthValidateHandle.userNotExist();\n    }\n  },\n\n  /**\r\n   * 获取当前登录用户\r\n   * @returns {null}\r\n   */\n  getLoginUser: function getLoginUser() {\n    return this._user;\n  },\n\n  /**\r\n   * 查看当前用户是否处于登录状态\r\n   * @returns {boolean}\r\n   */\n  isLogin: function isLogin() {\n    return !!this.getLoginUser();\n  },\n\n  /**\r\n   * 刷新当前登录用户信息\r\n   * 可传入一个回调函数来处理自定义内容\r\n   * @param callback\r\n   */\n  refreshUser: function refreshUser() {\n    var _this = this;\n\n    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    AjaxUtil.request(Api.user.myInfo).then(function (user) {\n      _this.setLoginUser(user);\n\n      callback && callback(user);\n    });\n  }\n};",{"version":3,"sources":["E:\\项目\\SKWMS\\wms-ui\\src\\project\\user\\UserHandle.js"],"names":["VueUtil","CacheUtil","AjaxUtil","Api","AuthValidateHandle","_user","_cache_key","process","env","NODE_ENV","_setIsLoginStore","status","getVue","$store","dispatch","setLoginUser","user","set","removeLoginUser","remove","initCheckUser","get","userNotExist","getLoginUser","isLogin","refreshUser","callback","request","myInfo","then"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AAEA,eAAe;AAEX;;;AAGAC,EAAAA,KAAK,EAAE,IALI;;AAMX;;;AAGAC,EAAAA,UAAU,EAAE,sBAAsBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,aAAxC,GAAwD,EAA9E,CATD;;AAUX;;;;;AAKAC,EAAAA,gBAfW,4BAeMC,MAfN,EAec;AACrBX,IAAAA,OAAO,CAACY,MAAR,GAAiBC,MAAjB,CAAwBC,QAAxB,CAAiC,YAAjC,EAA+CH,MAA/C;AACH,GAjBU;;AAkBX;;;;;AAKAI,EAAAA,YAvBW,wBAuBEC,IAvBF,EAuBQ;AACf,SAAKX,KAAL,GAAaW,IAAb;AACAf,IAAAA,SAAS,CAACgB,GAAV,CAAc,KAAKX,UAAnB,EAA+BU,IAA/B;;AACA,SAAKN,gBAAL,CAAsB,CAAC,CAACM,IAAxB;AACH,GA3BU;;AA4BX;;;;AAIAE,EAAAA,eAhCW,6BAgCO;AACd,SAAKb,KAAL,GAAa,KAAb;AACAJ,IAAAA,SAAS,CAACkB,MAAV,CAAiB,KAAKb,UAAtB;;AACA,SAAKI,gBAAL,CAAsB,KAAtB;AACH,GApCU;;AAsCX;;;;;AAKAU,EAAAA,aA3CW,2BA2CK;AACZ,QAAIJ,IAAI,GAAGf,SAAS,CAACoB,GAAV,CAAc,KAAKf,UAAnB,EAA+B,IAA/B,CAAX;AACA,SAAKS,YAAL,CAAkBC,IAAlB;;AACA,QAAI,CAACA,IAAL,EAAW;AACPZ,MAAAA,kBAAkB,CAACkB,YAAnB;AACH;AACJ,GAjDU;;AAmDX;;;;AAIAC,EAAAA,YAvDW,0BAuDI;AACX,WAAO,KAAKlB,KAAZ;AACH,GAzDU;;AA0DX;;;;AAIAmB,EAAAA,OA9DW,qBA8DD;AACN,WAAO,CAAC,CAAC,KAAKD,YAAL,EAAT;AACH,GAhEU;;AAkEX;;;;;AAKAE,EAAAA,WAvEW,yBAuEkB;AAAA;;AAAA,QAAjBC,QAAiB,uEAAN,IAAM;AACzBxB,IAAAA,QAAQ,CAACyB,OAAT,CAAiBxB,GAAG,CAACa,IAAJ,CAASY,MAA1B,EACKC,IADL,CACU,UAAAb,IAAI,EAAI;AACV,MAAA,KAAI,CAACD,YAAL,CAAkBC,IAAlB;;AACAU,MAAAA,QAAQ,IAAIA,QAAQ,CAACV,IAAD,CAApB;AACH,KAJL;AAKH;AA7EU,CAAf","sourcesContent":["import VueUtil from \"@/util/VueUtil\";\r\nimport CacheUtil from \"@/util/CacheUtil\";\r\nimport AjaxUtil from \"@/util/AjaxUtil\";\r\nimport Api from \"@/assets/api/Api\";\r\nimport AuthValidateHandle from \"@/project/user/AuthValidateHandle\";\r\n\r\nexport default {\r\n\r\n    /**\r\n     * 当前登录用户\r\n     */\r\n    _user: null,\r\n    /**\r\n     * 登录用户在缓存中的key值\r\n     */\r\n    _cache_key: \"login_user_cache\" + (process.env.NODE_ENV === 'production' ? '_production' : ''),\r\n    /**\r\n     * 设置状态管理器 isLogin 当前状态\r\n     * @param status    登录状态 false ：未登录， true ： 已登录\r\n     * @private\r\n     */\r\n    _setIsLoginStore(status) {\r\n        VueUtil.getVue().$store.dispatch(\"setIsLogin\", status);\r\n    },\r\n    /**\r\n     * 设置登录用户\r\n     * 将登录用户写入缓存\r\n     * @param user 用户\r\n     */\r\n    setLoginUser(user) {\r\n        this._user = user;\r\n        CacheUtil.set(this._cache_key, user);\r\n        this._setIsLoginStore(!!user);\r\n    },\r\n    /**\r\n     * 移除登录用户\r\n     * 从缓存中移除登录用户信息\r\n     */\r\n    removeLoginUser() {\r\n        this._user = false;\r\n        CacheUtil.remove(this._cache_key);\r\n        this._setIsLoginStore(false);\r\n    },\r\n\r\n    /**\r\n     * 初始化检查用户是否存在登录缓存\r\n     * 存在则暂时认为用户已经登录并保存用户\r\n     * 用户页面刷新时候进行初始化\r\n     */\r\n    initCheckUser() {\r\n        let user = CacheUtil.get(this._cache_key, null);\r\n        this.setLoginUser(user);\r\n        if (!user) {\r\n            AuthValidateHandle.userNotExist();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 获取当前登录用户\r\n     * @returns {null}\r\n     */\r\n    getLoginUser() {\r\n        return this._user;\r\n    },\r\n    /**\r\n     * 查看当前用户是否处于登录状态\r\n     * @returns {boolean}\r\n     */\r\n    isLogin() {\r\n        return !!this.getLoginUser();\r\n    },\r\n\r\n    /**\r\n     * 刷新当前登录用户信息\r\n     * 可传入一个回调函数来处理自定义内容\r\n     * @param callback\r\n     */\r\n    refreshUser(callback = null) {\r\n        AjaxUtil.request(Api.user.myInfo)\r\n            .then(user => {\r\n                this.setLoginUser(user);\r\n                callback && callback(user);\r\n            })\r\n    },\r\n\r\n}"]}]}