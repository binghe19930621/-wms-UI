{"remainingRequest":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js!E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\项目\\SKWMS\\wms-ui\\src\\util\\ObjectUtil.js","dependencies":[{"path":"E:\\项目\\SKWMS\\wms-ui\\src\\util\\ObjectUtil.js","mtime":1585370816118},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\SKWMS\\wms-ui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"E:\\\\\\u9879\\u76EE\\\\SKWMS\\\\wms-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nexport default {\n  /**\r\n   * 深度 clone\r\n   * 利用序列化和放序列化进行简单的深度 clone 操作\r\n   * @param obj\r\n   * @returns {any}\r\n   */\n  deepClone: function deepClone(obj) {\n    return JSON.parse(_JSON$stringify(obj));\n  },\n\n  /**\r\n   * 将字典转换成 list\r\n   * @param dict\r\n   * @param idKey\r\n   * @param labelKey\r\n   * @returns {Array}\r\n   */\n  dict2List: function dict2List() {\n    var dict = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var idKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n    var labelKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'label';\n    var ret = [];\n\n    for (var i in dict) {\n      var D = dict[i];\n      var c = {};\n\n      try {\n        i *= 1;\n      } catch (ignore) {}\n\n      c[idKey] = i;\n      c[labelKey] = D;\n      ret.push(c);\n    }\n\n    return ret;\n  }\n};",{"version":3,"sources":["E:\\项目\\SKWMS\\wms-ui\\src\\util\\ObjectUtil.js"],"names":["deepClone","obj","JSON","parse","dict2List","dict","idKey","labelKey","ret","i","D","c","ignore","push"],"mappings":";AAAA,eAAe;AAEX;;;;;;AAMAA,EAAAA,SARW,qBAQDC,GARC,EAQI;AACX,WAAOC,IAAI,CAACC,KAAL,CAAW,gBAAeF,GAAf,CAAX,CAAP;AACH,GAVU;;AAYX;;;;;;;AAOAG,EAAAA,SAnBW,uBAmB4C;AAAA,QAA7CC,IAA6C,uEAAtC,EAAsC;AAAA,QAAlCC,KAAkC,uEAA1B,IAA0B;AAAA,QAApBC,QAAoB,uEAAT,OAAS;AACnD,QAAIC,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIC,CAAT,IAAcJ,IAAd,EAAoB;AAChB,UAAIK,CAAC,GAAGL,IAAI,CAACI,CAAD,CAAZ;AACA,UAAIE,CAAC,GAAG,EAAR;;AACA,UAAI;AACAF,QAAAA,CAAC,IAAI,CAAL;AACH,OAFD,CAEE,OAAOG,MAAP,EAAe,CAChB;;AACDD,MAAAA,CAAC,CAACL,KAAD,CAAD,GAAWG,CAAX;AACAE,MAAAA,CAAC,CAACJ,QAAD,CAAD,GAAcG,CAAd;AACAF,MAAAA,GAAG,CAACK,IAAJ,CAASF,CAAT;AACH;;AACD,WAAOH,GAAP;AACH;AAjCU,CAAf","sourcesContent":["export default {\r\n\r\n    /**\r\n     * 深度 clone\r\n     * 利用序列化和放序列化进行简单的深度 clone 操作\r\n     * @param obj\r\n     * @returns {any}\r\n     */\r\n    deepClone(obj) {\r\n        return JSON.parse(JSON.stringify(obj))\r\n    },\r\n\r\n    /**\r\n     * 将字典转换成 list\r\n     * @param dict\r\n     * @param idKey\r\n     * @param labelKey\r\n     * @returns {Array}\r\n     */\r\n    dict2List(dict = {}, idKey = 'id', labelKey = 'label') {\r\n        let ret = [];\r\n        for (let i in dict) {\r\n            let D = dict[i];\r\n            let c = {};\r\n            try {\r\n                i *= 1;\r\n            } catch (ignore) {\r\n            }\r\n            c[idKey] = i;\r\n            c[labelKey] = D;\r\n            ret.push(c);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n}"]}]}